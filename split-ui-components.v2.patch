diff --git a/ui/modules/expansions.js b/ui/modules/expansions.js
--- a/ui/modules/expansions.js
+++ b/ui/modules/expansions.js
 // Rebranded in UI as "Cues". Keeps id to preserve manager wiring.
 import { el, rpc, getState, setState, Toolbar, applyFilter, showToast, openContextMenu, openModal, closeModal, withSidebar, MarkdownEditor, triggerAutoSyncPush, WizardStepper } from '../utils.js';
 
+import Toolbar from '../components/Toolbar.js';
+import MarkdownEditor from '../components/MarkdownEditor.js';
 export const id = 'expansions';
 export const label = 'Cues';
 
diff --git a/ui/components/Toolbar.js b/ui/components/Toolbar.js
new file mode 100644
index 0000000..0000000
--- /dev/null
+++ b/ui/components/Toolbar.js
@@ -0,0 +1,22 @@
+import { el } from '../utils.js';
+
+/**
+ * Toolbar component
+ * Supports both legacy signature { title, buttons } and the newer
+ * signature { left, right } for layout flexibility.
+ */
+export function Toolbar(opts = {}){
+  const hasClassic = 'title' in opts || 'buttons' in opts;
+  if (hasClassic){
+    const left = el('div', { class:'row' }, opts.title ? el('strong', {}, opts.title) : null);
+    const right = el('div', { class:'row' }, ...(opts.buttons || []));
+    return el('div', { class:'toolbar' }, left, right);
+  }
+  const left = opts.left || el('div', { class:'row' });
+  const right = opts.right || el('div', { class:'row' });
+  return el('div', { class:'toolbar' }, left, right);
+}
+export default Toolbar;
+
+// CHANGELOG
+// 2025-08-12: New component extracted from utils.js. Adds dual-signature support to avoid regressions.
diff --git a/ui/components/MarkdownEditor.js b/ui/components/MarkdownEditor.js
new file mode 100644
index 0000000..0000000
--- /dev/null
+++ b/ui/components/MarkdownEditor.js
@@ -0,0 +1,36 @@
+import { el } from '../utils.js';
+
+function wrapSelection(t, before, after = ''){
+  const s = t.selectionStart || 0, e = t.selectionEnd || 0;
+  const val = t.value;
+  const pre = val.slice(0, s);
+  const mid = val.slice(s, e);
+  const post = val.slice(e);
+  t.value = pre + before + mid + after + post;
+  const pos = (pre + before + mid + after).length;
+  t.focus();
+  t.setSelectionRange(pos, pos);
+  t.dispatchEvent(new Event('input', { bubbles:true }));
+}
+
+/**
+ * MarkdownEditor component
+ * Simple textarea with a small formatting bar that wraps selections.
+ */
+export function MarkdownEditor({ value = '', oninput } = {}){
+  const ta = el('textarea', { class:'input code', oninput:(e)=> oninput && oninput(e.target.value) }, value);
+  const bar = el('div', { class:'row wrap gap' },
+    el('button', { class:'btn secondary', onclick: ()=> wrapSelection(ta, '**','**') }, 'Bold'),
+    el('button', { class:'btn secondary', onclick: ()=> wrapSelection(ta, '*','*') }, 'Italic'),
+    el('button', { class:'btn secondary', onclick: ()=> wrapSelection(ta, '`','`') }, 'Code'),
+    el('button', { class:'btn secondary', onclick: ()=> wrapSelection(ta, '```\n','\n```') }, 'Code Block'),
+    el('button', { class:'btn secondary', onclick: ()=> wrapSelection(ta, '- ','') }, 'Bullet'),
+    el('button', { class:'btn secondary', onclick: ()=> wrapSelection(ta, '1. ','') }, 'Numbered'),
+    el('button', { class:'btn secondary', onclick: ()=> wrapSelection(ta, '> ','') }, 'Quote')
+  );
+  return el('div', {}, bar, ta);
+}
+export default MarkdownEditor;
+
+// CHANGELOG
+// 2025-08-12: New component extracted from utils.js. Mirrors previous behavior exactly.
